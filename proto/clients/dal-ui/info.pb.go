// Code generated by protoc-gen-go. DO NOT EDIT.
// source: info.proto

package dal_ui

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type InfoStatus int32

const (
	InfoStatus_NULL      InfoStatus = 0
	InfoStatus_PUBLISHED InfoStatus = 1
	InfoStatus_REVIEWED  InfoStatus = 2
	InfoStatus_DRAFTED   InfoStatus = 3
	InfoStatus_CANCELED  InfoStatus = 4
)

var InfoStatus_name = map[int32]string{
	0: "NULL",
	1: "PUBLISHED",
	2: "REVIEWED",
	3: "DRAFTED",
	4: "CANCELED",
}

var InfoStatus_value = map[string]int32{
	"NULL":      0,
	"PUBLISHED": 1,
	"REVIEWED":  2,
	"DRAFTED":   3,
	"CANCELED":  4,
}

func (x InfoStatus) String() string {
	return proto.EnumName(InfoStatus_name, int32(x))
}

func (InfoStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{0}
}

type DictList struct {
	Dict                 []*Dictionary `protobuf:"bytes,1,rep,name=dict,proto3" json:"dict,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DictList) Reset()         { *m = DictList{} }
func (m *DictList) String() string { return proto.CompactTextString(m) }
func (*DictList) ProtoMessage()    {}
func (*DictList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{0}
}

func (m *DictList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DictList.Unmarshal(m, b)
}
func (m *DictList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DictList.Marshal(b, m, deterministic)
}
func (m *DictList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DictList.Merge(m, src)
}
func (m *DictList) XXX_Size() int {
	return xxx_messageInfo_DictList.Size(m)
}
func (m *DictList) XXX_DiscardUnknown() {
	xxx_messageInfo_DictList.DiscardUnknown(m)
}

var xxx_messageInfo_DictList proto.InternalMessageInfo

func (m *DictList) GetDict() []*Dictionary {
	if m != nil {
		return m.Dict
	}
	return nil
}

type ArticleList struct {
	Article              []*Article `protobuf:"bytes,1,rep,name=article,proto3" json:"article,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ArticleList) Reset()         { *m = ArticleList{} }
func (m *ArticleList) String() string { return proto.CompactTextString(m) }
func (*ArticleList) ProtoMessage()    {}
func (*ArticleList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{1}
}

func (m *ArticleList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArticleList.Unmarshal(m, b)
}
func (m *ArticleList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArticleList.Marshal(b, m, deterministic)
}
func (m *ArticleList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleList.Merge(m, src)
}
func (m *ArticleList) XXX_Size() int {
	return xxx_messageInfo_ArticleList.Size(m)
}
func (m *ArticleList) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleList.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleList proto.InternalMessageInfo

func (m *ArticleList) GetArticle() []*Article {
	if m != nil {
		return m.Article
	}
	return nil
}

type PublishReq struct {
	DictName             string     `protobuf:"bytes,1,opt,name=dict_name,json=dictName,proto3" json:"dict_name,omitempty"`
	Status               InfoStatus `protobuf:"varint,2,opt,name=status,proto3,enum=dal_ui.InfoStatus" json:"status,omitempty"`
	LastModifiedBy       string     `protobuf:"bytes,3,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PublishReq) Reset()         { *m = PublishReq{} }
func (m *PublishReq) String() string { return proto.CompactTextString(m) }
func (*PublishReq) ProtoMessage()    {}
func (*PublishReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{2}
}

func (m *PublishReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishReq.Unmarshal(m, b)
}
func (m *PublishReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishReq.Marshal(b, m, deterministic)
}
func (m *PublishReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishReq.Merge(m, src)
}
func (m *PublishReq) XXX_Size() int {
	return xxx_messageInfo_PublishReq.Size(m)
}
func (m *PublishReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishReq.DiscardUnknown(m)
}

var xxx_messageInfo_PublishReq proto.InternalMessageInfo

func (m *PublishReq) GetDictName() string {
	if m != nil {
		return m.DictName
	}
	return ""
}

func (m *PublishReq) GetStatus() InfoStatus {
	if m != nil {
		return m.Status
	}
	return InfoStatus_NULL
}

func (m *PublishReq) GetLastModifiedBy() string {
	if m != nil {
		return m.LastModifiedBy
	}
	return ""
}

type BatchDictId struct {
	Id                   []int64  `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchDictId) Reset()         { *m = BatchDictId{} }
func (m *BatchDictId) String() string { return proto.CompactTextString(m) }
func (*BatchDictId) ProtoMessage()    {}
func (*BatchDictId) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{3}
}

func (m *BatchDictId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchDictId.Unmarshal(m, b)
}
func (m *BatchDictId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchDictId.Marshal(b, m, deterministic)
}
func (m *BatchDictId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchDictId.Merge(m, src)
}
func (m *BatchDictId) XXX_Size() int {
	return xxx_messageInfo_BatchDictId.Size(m)
}
func (m *BatchDictId) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchDictId.DiscardUnknown(m)
}

var xxx_messageInfo_BatchDictId proto.InternalMessageInfo

func (m *BatchDictId) GetId() []int64 {
	if m != nil {
		return m.Id
	}
	return nil
}

type BatchArtId struct {
	Id                   []int64  `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchArtId) Reset()         { *m = BatchArtId{} }
func (m *BatchArtId) String() string { return proto.CompactTextString(m) }
func (*BatchArtId) ProtoMessage()    {}
func (*BatchArtId) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{4}
}

func (m *BatchArtId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchArtId.Unmarshal(m, b)
}
func (m *BatchArtId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchArtId.Marshal(b, m, deterministic)
}
func (m *BatchArtId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchArtId.Merge(m, src)
}
func (m *BatchArtId) XXX_Size() int {
	return xxx_messageInfo_BatchArtId.Size(m)
}
func (m *BatchArtId) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchArtId.DiscardUnknown(m)
}

var xxx_messageInfo_BatchArtId proto.InternalMessageInfo

func (m *BatchArtId) GetId() []int64 {
	if m != nil {
		return m.Id
	}
	return nil
}

type DictPageReq struct {
	Parent               string     `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Status               InfoStatus `protobuf:"varint,2,opt,name=status,proto3,enum=dal_ui.InfoStatus" json:"status,omitempty"`
	Language             string     `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	Page                 *PageReq   `protobuf:"bytes,4,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DictPageReq) Reset()         { *m = DictPageReq{} }
func (m *DictPageReq) String() string { return proto.CompactTextString(m) }
func (*DictPageReq) ProtoMessage()    {}
func (*DictPageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{5}
}

func (m *DictPageReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DictPageReq.Unmarshal(m, b)
}
func (m *DictPageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DictPageReq.Marshal(b, m, deterministic)
}
func (m *DictPageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DictPageReq.Merge(m, src)
}
func (m *DictPageReq) XXX_Size() int {
	return xxx_messageInfo_DictPageReq.Size(m)
}
func (m *DictPageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DictPageReq.DiscardUnknown(m)
}

var xxx_messageInfo_DictPageReq proto.InternalMessageInfo

func (m *DictPageReq) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *DictPageReq) GetStatus() InfoStatus {
	if m != nil {
		return m.Status
	}
	return InfoStatus_NULL
}

func (m *DictPageReq) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *DictPageReq) GetPage() *PageReq {
	if m != nil {
		return m.Page
	}
	return nil
}

type DictPageResp struct {
	DictList             *DictList `protobuf:"bytes,1,opt,name=dictList,proto3" json:"dictList,omitempty"`
	Page                 *PageResp `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DictPageResp) Reset()         { *m = DictPageResp{} }
func (m *DictPageResp) String() string { return proto.CompactTextString(m) }
func (*DictPageResp) ProtoMessage()    {}
func (*DictPageResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{6}
}

func (m *DictPageResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DictPageResp.Unmarshal(m, b)
}
func (m *DictPageResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DictPageResp.Marshal(b, m, deterministic)
}
func (m *DictPageResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DictPageResp.Merge(m, src)
}
func (m *DictPageResp) XXX_Size() int {
	return xxx_messageInfo_DictPageResp.Size(m)
}
func (m *DictPageResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DictPageResp.DiscardUnknown(m)
}

var xxx_messageInfo_DictPageResp proto.InternalMessageInfo

func (m *DictPageResp) GetDictList() *DictList {
	if m != nil {
		return m.DictList
	}
	return nil
}

func (m *DictPageResp) GetPage() *PageResp {
	if m != nil {
		return m.Page
	}
	return nil
}

type ArticleReq struct {
	DictName             string     `protobuf:"bytes,1,opt,name=dict_name,json=dictName,proto3" json:"dict_name,omitempty"`
	Status               InfoStatus `protobuf:"varint,2,opt,name=status,proto3,enum=dal_ui.InfoStatus" json:"status,omitempty"`
	Language             string     `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ArticleReq) Reset()         { *m = ArticleReq{} }
func (m *ArticleReq) String() string { return proto.CompactTextString(m) }
func (*ArticleReq) ProtoMessage()    {}
func (*ArticleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{7}
}

func (m *ArticleReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArticleReq.Unmarshal(m, b)
}
func (m *ArticleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArticleReq.Marshal(b, m, deterministic)
}
func (m *ArticleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleReq.Merge(m, src)
}
func (m *ArticleReq) XXX_Size() int {
	return xxx_messageInfo_ArticleReq.Size(m)
}
func (m *ArticleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleReq.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleReq proto.InternalMessageInfo

func (m *ArticleReq) GetDictName() string {
	if m != nil {
		return m.DictName
	}
	return ""
}

func (m *ArticleReq) GetStatus() InfoStatus {
	if m != nil {
		return m.Status
	}
	return InfoStatus_NULL
}

func (m *ArticleReq) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

type PageReq struct {
	Number               int32    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Size                 int32    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Sort                 string   `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PageReq) Reset()         { *m = PageReq{} }
func (m *PageReq) String() string { return proto.CompactTextString(m) }
func (*PageReq) ProtoMessage()    {}
func (*PageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{8}
}

func (m *PageReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PageReq.Unmarshal(m, b)
}
func (m *PageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PageReq.Marshal(b, m, deterministic)
}
func (m *PageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageReq.Merge(m, src)
}
func (m *PageReq) XXX_Size() int {
	return xxx_messageInfo_PageReq.Size(m)
}
func (m *PageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PageReq.DiscardUnknown(m)
}

var xxx_messageInfo_PageReq proto.InternalMessageInfo

func (m *PageReq) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *PageReq) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *PageReq) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

type PageResp struct {
	TotalElements        int64    `protobuf:"varint,1,opt,name=total_elements,json=totalElements,proto3" json:"total_elements,omitempty"`
	TotalPages           int32    `protobuf:"varint,2,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	First                bool     `protobuf:"varint,3,opt,name=first,proto3" json:"first,omitempty"`
	Last                 bool     `protobuf:"varint,4,opt,name=last,proto3" json:"last,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PageResp) Reset()         { *m = PageResp{} }
func (m *PageResp) String() string { return proto.CompactTextString(m) }
func (*PageResp) ProtoMessage()    {}
func (*PageResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{9}
}

func (m *PageResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PageResp.Unmarshal(m, b)
}
func (m *PageResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PageResp.Marshal(b, m, deterministic)
}
func (m *PageResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageResp.Merge(m, src)
}
func (m *PageResp) XXX_Size() int {
	return xxx_messageInfo_PageResp.Size(m)
}
func (m *PageResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PageResp.DiscardUnknown(m)
}

var xxx_messageInfo_PageResp proto.InternalMessageInfo

func (m *PageResp) GetTotalElements() int64 {
	if m != nil {
		return m.TotalElements
	}
	return 0
}

func (m *PageResp) GetTotalPages() int32 {
	if m != nil {
		return m.TotalPages
	}
	return 0
}

func (m *PageResp) GetFirst() bool {
	if m != nil {
		return m.First
	}
	return false
}

func (m *PageResp) GetLast() bool {
	if m != nil {
		return m.Last
	}
	return false
}

type MultiDictReq struct {
	Parent               string     `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Status               InfoStatus `protobuf:"varint,2,opt,name=status,proto3,enum=dal_ui.InfoStatus" json:"status,omitempty"`
	Language             string     `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MultiDictReq) Reset()         { *m = MultiDictReq{} }
func (m *MultiDictReq) String() string { return proto.CompactTextString(m) }
func (*MultiDictReq) ProtoMessage()    {}
func (*MultiDictReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{10}
}

func (m *MultiDictReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiDictReq.Unmarshal(m, b)
}
func (m *MultiDictReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiDictReq.Marshal(b, m, deterministic)
}
func (m *MultiDictReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiDictReq.Merge(m, src)
}
func (m *MultiDictReq) XXX_Size() int {
	return xxx_messageInfo_MultiDictReq.Size(m)
}
func (m *MultiDictReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiDictReq.DiscardUnknown(m)
}

var xxx_messageInfo_MultiDictReq proto.InternalMessageInfo

func (m *MultiDictReq) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *MultiDictReq) GetStatus() InfoStatus {
	if m != nil {
		return m.Status
	}
	return InfoStatus_NULL
}

func (m *MultiDictReq) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

type MultiDictResp struct {
	DictList             []*DictList `protobuf:"bytes,1,rep,name=dictList,proto3" json:"dictList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MultiDictResp) Reset()         { *m = MultiDictResp{} }
func (m *MultiDictResp) String() string { return proto.CompactTextString(m) }
func (*MultiDictResp) ProtoMessage()    {}
func (*MultiDictResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{11}
}

func (m *MultiDictResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiDictResp.Unmarshal(m, b)
}
func (m *MultiDictResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiDictResp.Marshal(b, m, deterministic)
}
func (m *MultiDictResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiDictResp.Merge(m, src)
}
func (m *MultiDictResp) XXX_Size() int {
	return xxx_messageInfo_MultiDictResp.Size(m)
}
func (m *MultiDictResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiDictResp.DiscardUnknown(m)
}

var xxx_messageInfo_MultiDictResp proto.InternalMessageInfo

func (m *MultiDictResp) GetDictList() []*DictList {
	if m != nil {
		return m.DictList
	}
	return nil
}

type MultiArticleReq struct {
	DictName             string     `protobuf:"bytes,1,opt,name=dict_name,json=dictName,proto3" json:"dict_name,omitempty"`
	Status               InfoStatus `protobuf:"varint,2,opt,name=status,proto3,enum=dal_ui.InfoStatus" json:"status,omitempty"`
	Language             string     `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MultiArticleReq) Reset()         { *m = MultiArticleReq{} }
func (m *MultiArticleReq) String() string { return proto.CompactTextString(m) }
func (*MultiArticleReq) ProtoMessage()    {}
func (*MultiArticleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{12}
}

func (m *MultiArticleReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiArticleReq.Unmarshal(m, b)
}
func (m *MultiArticleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiArticleReq.Marshal(b, m, deterministic)
}
func (m *MultiArticleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiArticleReq.Merge(m, src)
}
func (m *MultiArticleReq) XXX_Size() int {
	return xxx_messageInfo_MultiArticleReq.Size(m)
}
func (m *MultiArticleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiArticleReq.DiscardUnknown(m)
}

var xxx_messageInfo_MultiArticleReq proto.InternalMessageInfo

func (m *MultiArticleReq) GetDictName() string {
	if m != nil {
		return m.DictName
	}
	return ""
}

func (m *MultiArticleReq) GetStatus() InfoStatus {
	if m != nil {
		return m.Status
	}
	return InfoStatus_NULL
}

func (m *MultiArticleReq) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

type MultiArticleResp struct {
	ArticleList          *ArticleList `protobuf:"bytes,1,opt,name=articleList,proto3" json:"articleList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MultiArticleResp) Reset()         { *m = MultiArticleResp{} }
func (m *MultiArticleResp) String() string { return proto.CompactTextString(m) }
func (*MultiArticleResp) ProtoMessage()    {}
func (*MultiArticleResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{13}
}

func (m *MultiArticleResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiArticleResp.Unmarshal(m, b)
}
func (m *MultiArticleResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiArticleResp.Marshal(b, m, deterministic)
}
func (m *MultiArticleResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiArticleResp.Merge(m, src)
}
func (m *MultiArticleResp) XXX_Size() int {
	return xxx_messageInfo_MultiArticleResp.Size(m)
}
func (m *MultiArticleResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiArticleResp.DiscardUnknown(m)
}

var xxx_messageInfo_MultiArticleResp proto.InternalMessageInfo

func (m *MultiArticleResp) GetArticleList() *ArticleList {
	if m != nil {
		return m.ArticleList
	}
	return nil
}

type Dictionary struct {
	Id                   int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Parent               string     `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Name                 string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Uuid                 string     `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Language             string     `protobuf:"bytes,5,opt,name=language,proto3" json:"language,omitempty"`
	Status               InfoStatus `protobuf:"varint,6,opt,name=status,proto3,enum=dal_ui.InfoStatus" json:"status,omitempty"`
	Icon                 string     `protobuf:"bytes,7,opt,name=icon,proto3" json:"icon,omitempty"`
	Url                  string     `protobuf:"bytes,8,opt,name=url,proto3" json:"url,omitempty"`
	Links                string     `protobuf:"bytes,9,opt,name=links,proto3" json:"links,omitempty"`
	Ordinal              int32      `protobuf:"varint,10,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
	Extension            string     `protobuf:"bytes,11,opt,name=extension,proto3" json:"extension,omitempty"`
	Description          string     `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	CreatedBy            string     `protobuf:"bytes,13,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	CreatedDate          int64      `protobuf:"varint,14,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	LastModifiedBy       string     `protobuf:"bytes,15,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"`
	LastModifiedDate     int64      `protobuf:"varint,16,opt,name=last_modified_date,json=lastModifiedDate,proto3" json:"last_modified_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Dictionary) Reset()         { *m = Dictionary{} }
func (m *Dictionary) String() string { return proto.CompactTextString(m) }
func (*Dictionary) ProtoMessage()    {}
func (*Dictionary) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{14}
}

func (m *Dictionary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dictionary.Unmarshal(m, b)
}
func (m *Dictionary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dictionary.Marshal(b, m, deterministic)
}
func (m *Dictionary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dictionary.Merge(m, src)
}
func (m *Dictionary) XXX_Size() int {
	return xxx_messageInfo_Dictionary.Size(m)
}
func (m *Dictionary) XXX_DiscardUnknown() {
	xxx_messageInfo_Dictionary.DiscardUnknown(m)
}

var xxx_messageInfo_Dictionary proto.InternalMessageInfo

func (m *Dictionary) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Dictionary) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *Dictionary) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Dictionary) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Dictionary) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Dictionary) GetStatus() InfoStatus {
	if m != nil {
		return m.Status
	}
	return InfoStatus_NULL
}

func (m *Dictionary) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *Dictionary) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Dictionary) GetLinks() string {
	if m != nil {
		return m.Links
	}
	return ""
}

func (m *Dictionary) GetOrdinal() int32 {
	if m != nil {
		return m.Ordinal
	}
	return 0
}

func (m *Dictionary) GetExtension() string {
	if m != nil {
		return m.Extension
	}
	return ""
}

func (m *Dictionary) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Dictionary) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *Dictionary) GetCreatedDate() int64 {
	if m != nil {
		return m.CreatedDate
	}
	return 0
}

func (m *Dictionary) GetLastModifiedBy() string {
	if m != nil {
		return m.LastModifiedBy
	}
	return ""
}

func (m *Dictionary) GetLastModifiedDate() int64 {
	if m != nil {
		return m.LastModifiedDate
	}
	return 0
}

type Article struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DictId               int64    `protobuf:"varint,2,opt,name=dict_id,json=dictId,proto3" json:"dict_id,omitempty"`
	Title                string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Text                 string   `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	Language             string   `protobuf:"bytes,5,opt,name=language,proto3" json:"language,omitempty"`
	Icon                 string   `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
	Thumbnail            string   `protobuf:"bytes,7,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	Tag                  string   `protobuf:"bytes,8,opt,name=tag,proto3" json:"tag,omitempty"`
	Ordinal              int32    `protobuf:"varint,9,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
	Extension            string   `protobuf:"bytes,10,opt,name=extension,proto3" json:"extension,omitempty"`
	Description          string   `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	CreatedBy            string   `protobuf:"bytes,12,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	CreatedDate          int64    `protobuf:"varint,13,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	LastModifiedBy       string   `protobuf:"bytes,14,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"`
	LastModifiedDate     int64    `protobuf:"varint,15,opt,name=last_modified_date,json=lastModifiedDate,proto3" json:"last_modified_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Article) Reset()         { *m = Article{} }
func (m *Article) String() string { return proto.CompactTextString(m) }
func (*Article) ProtoMessage()    {}
func (*Article) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{15}
}

func (m *Article) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Article.Unmarshal(m, b)
}
func (m *Article) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Article.Marshal(b, m, deterministic)
}
func (m *Article) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Article.Merge(m, src)
}
func (m *Article) XXX_Size() int {
	return xxx_messageInfo_Article.Size(m)
}
func (m *Article) XXX_DiscardUnknown() {
	xxx_messageInfo_Article.DiscardUnknown(m)
}

var xxx_messageInfo_Article proto.InternalMessageInfo

func (m *Article) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Article) GetDictId() int64 {
	if m != nil {
		return m.DictId
	}
	return 0
}

func (m *Article) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Article) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Article) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Article) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *Article) GetThumbnail() string {
	if m != nil {
		return m.Thumbnail
	}
	return ""
}

func (m *Article) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *Article) GetOrdinal() int32 {
	if m != nil {
		return m.Ordinal
	}
	return 0
}

func (m *Article) GetExtension() string {
	if m != nil {
		return m.Extension
	}
	return ""
}

func (m *Article) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Article) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *Article) GetCreatedDate() int64 {
	if m != nil {
		return m.CreatedDate
	}
	return 0
}

func (m *Article) GetLastModifiedBy() string {
	if m != nil {
		return m.LastModifiedBy
	}
	return ""
}

func (m *Article) GetLastModifiedDate() int64 {
	if m != nil {
		return m.LastModifiedDate
	}
	return 0
}

func init() {
	proto.RegisterEnum("dal_ui.InfoStatus", InfoStatus_name, InfoStatus_value)
	proto.RegisterType((*DictList)(nil), "dal_ui.DictList")
	proto.RegisterType((*ArticleList)(nil), "dal_ui.ArticleList")
	proto.RegisterType((*PublishReq)(nil), "dal_ui.PublishReq")
	proto.RegisterType((*BatchDictId)(nil), "dal_ui.BatchDictId")
	proto.RegisterType((*BatchArtId)(nil), "dal_ui.BatchArtId")
	proto.RegisterType((*DictPageReq)(nil), "dal_ui.DictPageReq")
	proto.RegisterType((*DictPageResp)(nil), "dal_ui.DictPageResp")
	proto.RegisterType((*ArticleReq)(nil), "dal_ui.ArticleReq")
	proto.RegisterType((*PageReq)(nil), "dal_ui.PageReq")
	proto.RegisterType((*PageResp)(nil), "dal_ui.PageResp")
	proto.RegisterType((*MultiDictReq)(nil), "dal_ui.MultiDictReq")
	proto.RegisterType((*MultiDictResp)(nil), "dal_ui.MultiDictResp")
	proto.RegisterType((*MultiArticleReq)(nil), "dal_ui.MultiArticleReq")
	proto.RegisterType((*MultiArticleResp)(nil), "dal_ui.MultiArticleResp")
	proto.RegisterType((*Dictionary)(nil), "dal_ui.Dictionary")
	proto.RegisterType((*Article)(nil), "dal_ui.Article")
}

func init() { proto.RegisterFile("info.proto", fileDescriptor_f140d5b28dddb141) }

var fileDescriptor_f140d5b28dddb141 = []byte{
	// 1059 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x5d, 0x6e, 0xdb, 0x46,
	0x10, 0x96, 0x44, 0xfd, 0x50, 0x43, 0x49, 0x26, 0x36, 0xa9, 0x43, 0xc8, 0x0e, 0xea, 0xb2, 0x3f,
	0x70, 0x83, 0x40, 0x29, 0x5c, 0x04, 0x68, 0x81, 0xf6, 0xc1, 0x0a, 0x95, 0x56, 0x80, 0x62, 0xb8,
	0x74, 0xdd, 0x3e, 0x0a, 0x2b, 0x71, 0x25, 0x2f, 0x42, 0x91, 0x32, 0xb9, 0x34, 0xa2, 0xa2, 0x40,
	0xef, 0xd0, 0x93, 0xf4, 0x30, 0x3d, 0x40, 0x8f, 0x52, 0xec, 0x70, 0x29, 0x52, 0x96, 0x20, 0x37,
	0x40, 0x91, 0xb7, 0xdd, 0x6f, 0x77, 0xbe, 0x99, 0x9d, 0x6f, 0x38, 0x1c, 0x00, 0x1e, 0xcc, 0xc2,
	0xde, 0x32, 0x0a, 0x45, 0x48, 0xea, 0x1e, 0xf5, 0xc7, 0x09, 0xef, 0x1e, 0xcd, 0xc3, 0x70, 0xee,
	0xb3, 0x17, 0x88, 0x4e, 0x92, 0xd9, 0x0b, 0xb6, 0x58, 0x8a, 0x55, 0x7a, 0xc9, 0x3e, 0x03, 0xdd,
	0xe1, 0x53, 0x31, 0xe2, 0xb1, 0x20, 0x5f, 0x40, 0xd5, 0xe3, 0x53, 0x61, 0x95, 0x4f, 0xb4, 0x53,
	0xe3, 0x8c, 0xf4, 0x52, 0xfb, 0x9e, 0x3c, 0xe7, 0x61, 0x40, 0xa3, 0x95, 0x8b, 0xe7, 0xf6, 0x37,
	0x60, 0x9c, 0x47, 0x82, 0x4f, 0x7d, 0x86, 0x66, 0x5f, 0x42, 0x83, 0xa6, 0x5b, 0x65, 0x79, 0x90,
	0x59, 0xaa, 0x5b, 0x6e, 0x76, 0x6e, 0xff, 0x01, 0x70, 0x99, 0x4c, 0x7c, 0x1e, 0xdf, 0xb8, 0xec,
	0x96, 0x1c, 0x41, 0x53, 0xf2, 0x8d, 0x03, 0xba, 0x90, 0xa6, 0xe5, 0xd3, 0xa6, 0xab, 0x4b, 0xe0,
	0x82, 0x2e, 0x18, 0x79, 0x06, 0xf5, 0x58, 0x50, 0x91, 0xc4, 0x56, 0xe5, 0xa4, 0x7c, 0xda, 0xc9,
	0xc3, 0x19, 0x06, 0xb3, 0xf0, 0x0a, 0x4f, 0x5c, 0x75, 0x83, 0x9c, 0x82, 0xe9, 0xd3, 0x58, 0x8c,
	0x17, 0xa1, 0xc7, 0x67, 0x9c, 0x79, 0xe3, 0xc9, 0xca, 0xd2, 0x90, 0xaf, 0x23, 0xf1, 0x37, 0x0a,
	0xee, 0xaf, 0xec, 0xa7, 0x60, 0xf4, 0xa9, 0x98, 0xde, 0xc8, 0x37, 0x0d, 0x3d, 0xd2, 0x81, 0x0a,
	0xf7, 0x30, 0x6a, 0xcd, 0xad, 0x70, 0xcf, 0x3e, 0x06, 0xc0, 0xe3, 0xf3, 0x68, 0xd7, 0xe9, 0x9f,
	0x65, 0x30, 0xa4, 0xe1, 0x25, 0x9d, 0x33, 0x19, 0xff, 0x21, 0xd4, 0x97, 0x34, 0x62, 0x81, 0x50,
	0xc1, 0xab, 0xdd, 0x7b, 0x85, 0xde, 0x05, 0xdd, 0xa7, 0xc1, 0x3c, 0xa1, 0x73, 0xa6, 0x42, 0x5e,
	0xef, 0xc9, 0xa7, 0x50, 0x5d, 0x4a, 0xbc, 0x7a, 0x52, 0x2e, 0x66, 0x55, 0xb9, 0x77, 0xf1, 0xd0,
	0x9e, 0x40, 0x2b, 0x8f, 0x29, 0x5e, 0x92, 0xe7, 0x80, 0x39, 0x94, 0xca, 0x60, 0x58, 0xc6, 0x99,
	0x59, 0x14, 0x52, 0xe2, 0xee, 0xfa, 0x06, 0xf9, 0x4c, 0xb9, 0xa8, 0x6c, 0xde, 0xcc, 0xd8, 0x94,
	0x8f, 0x5b, 0x80, 0x4c, 0xca, 0xff, 0x53, 0xb6, 0x3d, 0x6f, 0xb7, 0x87, 0xd0, 0x28, 0xa4, 0x39,
	0x48, 0x16, 0x13, 0x16, 0xa1, 0xb3, 0x9a, 0xab, 0x76, 0x84, 0x40, 0x35, 0xe6, 0xbf, 0xa5, 0xb1,
	0xd7, 0x5c, 0x5c, 0x23, 0x16, 0x46, 0x42, 0xd1, 0xe1, 0xda, 0xfe, 0x1d, 0xf4, 0x75, 0x76, 0x3e,
	0x87, 0x8e, 0x08, 0x05, 0xf5, 0xc7, 0xcc, 0x67, 0x0b, 0x16, 0x88, 0x18, 0x39, 0x35, 0xb7, 0x8d,
	0xe8, 0x40, 0x81, 0xe4, 0x63, 0x30, 0xd2, 0x6b, 0xf2, 0xf9, 0xb1, 0xf2, 0x00, 0x08, 0x49, 0xaa,
	0x98, 0x3c, 0x86, 0xda, 0x8c, 0x47, 0x71, 0xea, 0x48, 0x77, 0xd3, 0x8d, 0xf4, 0x2e, 0xeb, 0x0d,
	0x05, 0xd3, 0x5d, 0x5c, 0xdb, 0x01, 0xb4, 0xde, 0x24, 0xbe, 0xe0, 0x32, 0xf9, 0x1f, 0xa0, 0x68,
	0xec, 0xef, 0xa1, 0x5d, 0xf0, 0xb7, 0x55, 0x10, 0xda, 0xfe, 0x82, 0xb0, 0xef, 0xe0, 0x00, 0xcd,
	0x3f, 0xbc, 0xde, 0xe6, 0xa6, 0xdf, 0x78, 0x49, 0x5e, 0x82, 0x41, 0xf3, 0x3e, 0xa3, 0xaa, 0xf9,
	0xd1, 0xbd, 0xe6, 0x82, 0xf1, 0x17, 0xef, 0xd9, 0x7f, 0x6b, 0x00, 0x79, 0xcf, 0x5a, 0x7f, 0xc5,
	0xe5, 0xf4, 0x2b, 0x2e, 0x08, 0x50, 0xd9, 0x10, 0x80, 0x40, 0x15, 0x5f, 0xa8, 0x4a, 0x47, 0xae,
	0x25, 0x96, 0x24, 0xdc, 0x43, 0x41, 0x9b, 0x2e, 0xae, 0x37, 0x5e, 0x51, 0xbb, 0xf7, 0xc5, 0xe6,
	0xd9, 0xa8, 0x3f, 0x98, 0x0d, 0x02, 0x55, 0x3e, 0x0d, 0x03, 0xab, 0x91, 0x72, 0xcb, 0x35, 0x31,
	0x41, 0x4b, 0x22, 0xdf, 0xd2, 0x11, 0x92, 0x4b, 0x59, 0x68, 0x3e, 0x0f, 0xde, 0xc6, 0x56, 0x13,
	0xb1, 0x74, 0x43, 0x2c, 0x68, 0x84, 0x91, 0xc7, 0x03, 0xea, 0x5b, 0x80, 0xb5, 0x99, 0x6d, 0xc9,
	0x31, 0x34, 0xd9, 0x3b, 0xc1, 0x82, 0x98, 0x87, 0x81, 0x65, 0xa0, 0x4d, 0x0e, 0x90, 0x13, 0x30,
	0x3c, 0x16, 0x4f, 0x23, 0xbe, 0x94, 0xd9, 0xb1, 0x5a, 0x78, 0x5e, 0x84, 0xc8, 0x53, 0x80, 0x69,
	0xc4, 0xa8, 0x48, 0x9b, 0x68, 0x3b, 0x25, 0x50, 0x48, 0x7f, 0x45, 0x3e, 0x81, 0x56, 0x76, 0xec,
	0x51, 0xc1, 0xac, 0x0e, 0xa6, 0xd5, 0x50, 0x98, 0x43, 0x05, 0xdb, 0xd9, 0x8c, 0x0f, 0x76, 0x35,
	0x63, 0xf2, 0x1c, 0xc8, 0xe6, 0x4d, 0xa4, 0x34, 0x91, 0xd2, 0x2c, 0xde, 0x95, 0xbc, 0xf6, 0x5f,
	0x1a, 0x34, 0x94, 0xe6, 0x5b, 0x9a, 0x3e, 0x81, 0x06, 0x96, 0x28, 0xf7, 0x50, 0x54, 0xcd, 0xad,
	0x7b, 0x69, 0x83, 0x7f, 0x0c, 0x35, 0xc1, 0x85, 0x9f, 0xa9, 0x9a, 0x6e, 0x64, 0xea, 0x05, 0x7b,
	0x27, 0x32, 0x59, 0xe5, 0x7a, 0xaf, 0xac, 0x99, 0x54, 0xf5, 0x82, 0x54, 0xc7, 0xd0, 0x14, 0x37,
	0xc9, 0x62, 0x12, 0x50, 0xee, 0x2b, 0x0d, 0x73, 0x40, 0x0a, 0x29, 0xe8, 0x3c, 0x13, 0x52, 0xd0,
	0x79, 0x51, 0xb2, 0xe6, 0x1e, 0xc9, 0xe0, 0x01, 0xc9, 0x8c, 0x87, 0x24, 0x6b, 0x3d, 0x24, 0x59,
	0xfb, 0xbf, 0x49, 0xd6, 0x79, 0x0f, 0xc9, 0x0e, 0x76, 0x4b, 0xf6, 0xec, 0x02, 0x20, 0x2f, 0x7c,
	0xa2, 0x43, 0xf5, 0xe2, 0x7a, 0x34, 0x32, 0x4b, 0xa4, 0x0d, 0xcd, 0xcb, 0xeb, 0xfe, 0x68, 0x78,
	0xf5, 0xe3, 0xc0, 0x31, 0xcb, 0xa4, 0x05, 0xba, 0x3b, 0xf8, 0x65, 0x38, 0xf8, 0x75, 0xe0, 0x98,
	0x15, 0x62, 0x40, 0xc3, 0x71, 0xcf, 0x5f, 0xff, 0x3c, 0x70, 0x4c, 0x4d, 0x1e, 0xbd, 0x3a, 0xbf,
	0x78, 0x35, 0x18, 0x0d, 0x1c, 0xb3, 0x7a, 0xf6, 0x4f, 0x15, 0x0c, 0x24, 0x64, 0xd1, 0x1d, 0x9f,
	0x32, 0xf2, 0x15, 0xe8, 0x57, 0xf4, 0x8e, 0xc9, 0x8f, 0x9d, 0x6c, 0x35, 0xb5, 0xee, 0x16, 0x62,
	0x97, 0xc8, 0xb7, 0x60, 0x48, 0x8b, 0xac, 0x8e, 0x76, 0x35, 0x93, 0xee, 0x2e, 0xd0, 0x2e, 0x11,
	0x07, 0xba, 0xd7, 0x4b, 0xf9, 0x5c, 0x49, 0x97, 0x3e, 0xa9, 0xbf, 0x72, 0xb2, 0x3e, 0xb8, 0xfe,
	0xd2, 0xf3, 0xf9, 0x66, 0x67, 0x00, 0x0e, 0x3c, 0x4a, 0x07, 0x10, 0xe6, 0xb3, 0x94, 0xaa, 0xbf,
	0x1a, 0x7a, 0x79, 0x20, 0x85, 0xe9, 0xa4, 0x7b, 0xd8, 0x4b, 0x27, 0xb7, 0x5e, 0x36, 0xb9, 0xf5,
	0x06, 0x72, 0x72, 0xb3, 0x4b, 0xe4, 0x35, 0x1c, 0x16, 0x58, 0x54, 0x9c, 0x48, 0x44, 0x36, 0x88,
	0x70, 0x8e, 0xd9, 0xc3, 0xf3, 0x1d, 0xb4, 0x7f, 0x4a, 0x58, 0xb4, 0xca, 0x26, 0x88, 0x3c, 0x8e,
	0xc2, 0x9c, 0xd3, 0x7d, 0xbc, 0x0d, 0xc6, 0x4b, 0xbb, 0x44, 0x5e, 0x42, 0x0b, 0xad, 0xb3, 0x6c,
	0x92, 0xfb, 0x73, 0x1f, 0xbb, 0xed, 0xde, 0x9f, 0x05, 0xed, 0x12, 0xf9, 0x01, 0x0e, 0xd1, 0x6c,
	0xfd, 0x9b, 0xea, 0xaf, 0x2e, 0xd3, 0x16, 0xbc, 0x76, 0x54, 0xfc, 0x63, 0x76, 0x3f, 0xda, 0x81,
	0xa2, 0x7f, 0x17, 0x8e, 0x72, 0xa2, 0x75, 0x12, 0xd6, 0x92, 0x3c, 0xd9, 0xb0, 0x2b, 0xc4, 0x64,
	0xed, 0x3e, 0x90, 0x9c, 0xfd, 0x36, 0x18, 0x3c, 0x78, 0xdb, 0x9b, 0x84, 0x01, 0x8f, 0x17, 0xe1,
	0xa4, 0x8e, 0x29, 0xfb, 0xfa, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x37, 0xf2, 0xe0, 0x04, 0x58,
	0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InfoServiceClient is the client API for InfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InfoServiceClient interface {
	SaveDict(ctx context.Context, in *DictList, opts ...grpc.CallOption) (*DictList, error)
	SaveArticle(ctx context.Context, in *ArticleList, opts ...grpc.CallOption) (*ArticleList, error)
	UpdateDictStatusByDictName(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*DictList, error)
	BatchDeleteDictById(ctx context.Context, in *BatchDictId, opts ...grpc.CallOption) (*empty.Empty, error)
	BatchDeleteArticleById(ctx context.Context, in *BatchArtId, opts ...grpc.CallOption) (*empty.Empty, error)
	// website query
	QueryDictPage(ctx context.Context, in *DictPageReq, opts ...grpc.CallOption) (*DictPageResp, error)
	QueryArticle(ctx context.Context, in *ArticleReq, opts ...grpc.CallOption) (*Article, error)
	// manage query
	QueryMultiDictByParent(ctx context.Context, in *MultiDictReq, opts ...grpc.CallOption) (*MultiDictResp, error)
	QueryMultiArticleByDictName(ctx context.Context, in *MultiArticleReq, opts ...grpc.CallOption) (*MultiArticleResp, error)
}

type infoServiceClient struct {
	cc *grpc.ClientConn
}

func NewInfoServiceClient(cc *grpc.ClientConn) InfoServiceClient {
	return &infoServiceClient{cc}
}

func (c *infoServiceClient) SaveDict(ctx context.Context, in *DictList, opts ...grpc.CallOption) (*DictList, error) {
	out := new(DictList)
	err := c.cc.Invoke(ctx, "/dal_ui.InfoService/SaveDict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) SaveArticle(ctx context.Context, in *ArticleList, opts ...grpc.CallOption) (*ArticleList, error) {
	out := new(ArticleList)
	err := c.cc.Invoke(ctx, "/dal_ui.InfoService/SaveArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) UpdateDictStatusByDictName(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*DictList, error) {
	out := new(DictList)
	err := c.cc.Invoke(ctx, "/dal_ui.InfoService/UpdateDictStatusByDictName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) BatchDeleteDictById(ctx context.Context, in *BatchDictId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dal_ui.InfoService/BatchDeleteDictById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) BatchDeleteArticleById(ctx context.Context, in *BatchArtId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dal_ui.InfoService/BatchDeleteArticleById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) QueryDictPage(ctx context.Context, in *DictPageReq, opts ...grpc.CallOption) (*DictPageResp, error) {
	out := new(DictPageResp)
	err := c.cc.Invoke(ctx, "/dal_ui.InfoService/QueryDictPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) QueryArticle(ctx context.Context, in *ArticleReq, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, "/dal_ui.InfoService/QueryArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) QueryMultiDictByParent(ctx context.Context, in *MultiDictReq, opts ...grpc.CallOption) (*MultiDictResp, error) {
	out := new(MultiDictResp)
	err := c.cc.Invoke(ctx, "/dal_ui.InfoService/QueryMultiDictByParent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) QueryMultiArticleByDictName(ctx context.Context, in *MultiArticleReq, opts ...grpc.CallOption) (*MultiArticleResp, error) {
	out := new(MultiArticleResp)
	err := c.cc.Invoke(ctx, "/dal_ui.InfoService/QueryMultiArticleByDictName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoServiceServer is the server API for InfoService service.
type InfoServiceServer interface {
	SaveDict(context.Context, *DictList) (*DictList, error)
	SaveArticle(context.Context, *ArticleList) (*ArticleList, error)
	UpdateDictStatusByDictName(context.Context, *PublishReq) (*DictList, error)
	BatchDeleteDictById(context.Context, *BatchDictId) (*empty.Empty, error)
	BatchDeleteArticleById(context.Context, *BatchArtId) (*empty.Empty, error)
	// website query
	QueryDictPage(context.Context, *DictPageReq) (*DictPageResp, error)
	QueryArticle(context.Context, *ArticleReq) (*Article, error)
	// manage query
	QueryMultiDictByParent(context.Context, *MultiDictReq) (*MultiDictResp, error)
	QueryMultiArticleByDictName(context.Context, *MultiArticleReq) (*MultiArticleResp, error)
}

// UnimplementedInfoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedInfoServiceServer struct {
}

func (*UnimplementedInfoServiceServer) SaveDict(ctx context.Context, req *DictList) (*DictList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveDict not implemented")
}
func (*UnimplementedInfoServiceServer) SaveArticle(ctx context.Context, req *ArticleList) (*ArticleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveArticle not implemented")
}
func (*UnimplementedInfoServiceServer) UpdateDictStatusByDictName(ctx context.Context, req *PublishReq) (*DictList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictStatusByDictName not implemented")
}
func (*UnimplementedInfoServiceServer) BatchDeleteDictById(ctx context.Context, req *BatchDictId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteDictById not implemented")
}
func (*UnimplementedInfoServiceServer) BatchDeleteArticleById(ctx context.Context, req *BatchArtId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteArticleById not implemented")
}
func (*UnimplementedInfoServiceServer) QueryDictPage(ctx context.Context, req *DictPageReq) (*DictPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDictPage not implemented")
}
func (*UnimplementedInfoServiceServer) QueryArticle(ctx context.Context, req *ArticleReq) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryArticle not implemented")
}
func (*UnimplementedInfoServiceServer) QueryMultiDictByParent(ctx context.Context, req *MultiDictReq) (*MultiDictResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMultiDictByParent not implemented")
}
func (*UnimplementedInfoServiceServer) QueryMultiArticleByDictName(ctx context.Context, req *MultiArticleReq) (*MultiArticleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMultiArticleByDictName not implemented")
}

func RegisterInfoServiceServer(s *grpc.Server, srv InfoServiceServer) {
	s.RegisterService(&_InfoService_serviceDesc, srv)
}

func _InfoService_SaveDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).SaveDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dal_ui.InfoService/SaveDict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).SaveDict(ctx, req.(*DictList))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_SaveArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).SaveArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dal_ui.InfoService/SaveArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).SaveArticle(ctx, req.(*ArticleList))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_UpdateDictStatusByDictName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).UpdateDictStatusByDictName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dal_ui.InfoService/UpdateDictStatusByDictName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).UpdateDictStatusByDictName(ctx, req.(*PublishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_BatchDeleteDictById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDictId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).BatchDeleteDictById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dal_ui.InfoService/BatchDeleteDictById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).BatchDeleteDictById(ctx, req.(*BatchDictId))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_BatchDeleteArticleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchArtId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).BatchDeleteArticleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dal_ui.InfoService/BatchDeleteArticleById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).BatchDeleteArticleById(ctx, req.(*BatchArtId))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_QueryDictPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).QueryDictPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dal_ui.InfoService/QueryDictPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).QueryDictPage(ctx, req.(*DictPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_QueryArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).QueryArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dal_ui.InfoService/QueryArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).QueryArticle(ctx, req.(*ArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_QueryMultiDictByParent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).QueryMultiDictByParent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dal_ui.InfoService/QueryMultiDictByParent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).QueryMultiDictByParent(ctx, req.(*MultiDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_QueryMultiArticleByDictName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).QueryMultiArticleByDictName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dal_ui.InfoService/QueryMultiArticleByDictName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).QueryMultiArticleByDictName(ctx, req.(*MultiArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _InfoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dal_ui.InfoService",
	HandlerType: (*InfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveDict",
			Handler:    _InfoService_SaveDict_Handler,
		},
		{
			MethodName: "SaveArticle",
			Handler:    _InfoService_SaveArticle_Handler,
		},
		{
			MethodName: "UpdateDictStatusByDictName",
			Handler:    _InfoService_UpdateDictStatusByDictName_Handler,
		},
		{
			MethodName: "BatchDeleteDictById",
			Handler:    _InfoService_BatchDeleteDictById_Handler,
		},
		{
			MethodName: "BatchDeleteArticleById",
			Handler:    _InfoService_BatchDeleteArticleById_Handler,
		},
		{
			MethodName: "QueryDictPage",
			Handler:    _InfoService_QueryDictPage_Handler,
		},
		{
			MethodName: "QueryArticle",
			Handler:    _InfoService_QueryArticle_Handler,
		},
		{
			MethodName: "QueryMultiDictByParent",
			Handler:    _InfoService_QueryMultiDictByParent_Handler,
		},
		{
			MethodName: "QueryMultiArticleByDictName",
			Handler:    _InfoService_QueryMultiArticleByDictName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "info.proto",
}
