// Code generated by protoc-gen-go. DO NOT EDIT.
// source: srv-info.proto

package srv_info

import (
	context "context"
	fmt "fmt"
	dal_ui "github.com/bootapp/srv-ui/proto/clients/dal-ui"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("srv-info.proto", fileDescriptor_7b4b987905398a8d) }

var fileDescriptor_7b4b987905398a8d = []byte{
	// 508 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xdf, 0x8a, 0xd3, 0x40,
	0x14, 0xc6, 0x59, 0x2f, 0xfc, 0x33, 0xae, 0x75, 0x99, 0xee, 0x6e, 0x35, 0xbb, 0x17, 0x92, 0x2b,
	0x29, 0x6c, 0x66, 0x51, 0x14, 0xf4, 0x6e, 0xcb, 0x8a, 0x14, 0x54, 0xaa, 0x41, 0xf0, 0x46, 0xca,
	0x24, 0x39, 0x4d, 0x47, 0x92, 0xcc, 0x98, 0x99, 0x09, 0x96, 0xd2, 0x1b, 0xef, 0xbc, 0xf6, 0x41,
	0x7c, 0x18, 0x5f, 0xc1, 0x07, 0x91, 0x99, 0x4c, 0x9b, 0x74, 0x1b, 0x14, 0xf6, 0x72, 0xbe, 0x93,
	0xf3, 0xfb, 0xce, 0xf9, 0x4e, 0x50, 0x4f, 0x96, 0xd5, 0x19, 0x2b, 0x66, 0x3c, 0x10, 0x25, 0x57,
	0x1c, 0xdf, 0x96, 0x65, 0x35, 0x35, 0x6f, 0xef, 0x24, 0xe5, 0x3c, 0xcd, 0x80, 0x58, 0x3d, 0xd2,
	0x33, 0x02, 0xb9, 0x50, 0x8b, 0xfa, 0x33, 0xef, 0xd4, 0x15, 0xa9, 0x60, 0x84, 0x16, 0x05, 0x57,
	0x54, 0x31, 0x5e, 0x48, 0x57, 0x7d, 0x91, 0x32, 0x35, 0xd7, 0x51, 0x10, 0xf3, 0x9c, 0x44, 0x9c,
	0x2b, 0x2a, 0x04, 0x31, 0x3e, 0x9a, 0xd5, 0x34, 0x12, 0x67, 0x0c, 0x0a, 0x25, 0x49, 0x42, 0x33,
	0x23, 0x36, 0xfe, 0x4f, 0x7e, 0xdd, 0x42, 0xbd, 0xb0, 0xac, 0xc6, 0xc5, 0x8c, 0x87, 0x50, 0x56,
	0x2c, 0x06, 0xfc, 0x1a, 0xdd, 0x09, 0x69, 0x05, 0x97, 0x2c, 0x56, 0x12, 0x1f, 0x04, 0x09, 0xcd,
	0xa6, 0x9a, 0x05, 0xe6, 0xf9, 0x86, 0x49, 0xe5, 0xed, 0x28, 0xfe, 0xf1, 0xf7, 0xdf, 0x7f, 0x7e,
	0xde, 0x38, 0xf0, 0xef, 0x5a, 0x30, 0x49, 0x4c, 0xe3, 0xcb, 0xbd, 0x21, 0x0e, 0xd1, 0xbe, 0x01,
	0x5d, 0x94, 0x8a, 0xc5, 0x19, 0x48, 0xdc, 0x5f, 0x77, 0x3a, 0xc5, 0xe2, 0xba, 0x44, 0xff, 0xa1,
	0x25, 0xf6, 0xfd, 0x5e, 0x4d, 0xa4, 0x8e, 0x60, 0xa0, 0x80, 0x4e, 0x3e, 0x8a, 0x84, 0xaa, 0x7a,
	0xbe, 0x50, 0x51, 0xa5, 0xe5, 0x68, 0x61, 0x1e, 0xef, 0x68, 0x0e, 0x18, 0xaf, 0x71, 0x13, 0x1d,
	0x65, 0x4c, 0xce, 0x3f, 0xc0, 0xd7, 0x8e, 0x89, 0x1f, 0x59, 0xbe, 0xe7, 0x1d, 0xb5, 0x26, 0x26,
	0xa2, 0xee, 0x80, 0xc4, 0xd8, 0x7c, 0x42, 0x87, 0x23, 0xaa, 0xe2, 0xf9, 0x25, 0x64, 0xe0, 0xbc,
	0x46, 0x8b, 0x71, 0xd2, 0xec, 0x50, 0x57, 0x59, 0xac, 0xc6, 0x89, 0x77, 0x1c, 0xd4, 0xe7, 0x09,
	0xd6, 0xb7, 0x0b, 0x5e, 0x99, 0xdb, 0xf9, 0x7d, 0x6b, 0x73, 0x6f, 0xd8, 0x0e, 0x06, 0x7f, 0x46,
	0x83, 0x16, 0x79, 0x1d, 0x8e, 0x85, 0xe3, 0x2d, 0xf8, 0x45, 0xf9, 0x2f, 0xb6, 0x0b, 0x7d, 0x78,
	0x25, 0x22, 0x9c, 0xa3, 0xde, 0x7b, 0x0d, 0xa5, 0x4d, 0x44, 0x4e, 0x68, 0x0a, 0xcd, 0xc8, 0x46,
	0x32, 0x8a, 0xc9, 0xe4, 0x70, 0x57, 0x94, 0xc2, 0x3f, 0xb7, 0xd0, 0x21, 0x7e, 0xdc, 0xce, 0x65,
	0x29, 0x68, 0x09, 0x85, 0x5a, 0x91, 0xa5, 0xb4, 0x69, 0xaf, 0xc8, 0x32, 0xa3, 0x45, 0xaa, 0x69,
	0x0a, 0x2b, 0xfc, 0x05, 0xed, 0x5b, 0x3b, 0xb7, 0x47, 0xb3, 0x82, 0x13, 0x8c, 0xd7, 0xfd, 0x2b,
	0x9a, 0xff, 0xcc, 0xda, 0x10, 0x7c, 0xb6, 0x35, 0x3b, 0x59, 0x1a, 0xbf, 0x69, 0x41, 0x73, 0xe8,
	0xf6, 0xfa, 0x86, 0x06, 0xd6, 0xeb, 0xad, 0xce, 0x14, 0x73, 0x27, 0x99, 0xd8, 0xd9, 0xf0, 0x66,
	0x9d, 0x4d, 0xcd, 0x18, 0x1f, 0x75, 0xa8, 0xd7, 0xda, 0xf2, 0xc7, 0x1e, 0x3a, 0x6d, 0xac, 0x9b,
	0x9b, 0x6d, 0x7e, 0xbb, 0xc1, 0x96, 0x53, 0x6b, 0xf7, 0x07, 0xdd, 0x05, 0x29, 0xfc, 0xe7, 0x76,
	0x8a, 0x73, 0x1c, 0x6c, 0x1f, 0xf0, 0x7f, 0x29, 0x44, 0x37, 0xed, 0x8f, 0xf0, 0xf4, 0x6f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x76, 0x4f, 0xe4, 0xd4, 0x4a, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SrvInfoServiceClient is the client API for SrvInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SrvInfoServiceClient interface {
	SaveDicts(ctx context.Context, in *dal_ui.DictList, opts ...grpc.CallOption) (*dal_ui.DictList, error)
	SaveArticles(ctx context.Context, in *dal_ui.ArticleList, opts ...grpc.CallOption) (*dal_ui.ArticleList, error)
	UpdateDictsStatusByDictName(ctx context.Context, in *dal_ui.PublishReq, opts ...grpc.CallOption) (*dal_ui.DictList, error)
	BatchDeleteDictsById(ctx context.Context, in *dal_ui.BatchDictId, opts ...grpc.CallOption) (*empty.Empty, error)
	BatchDeleteArticlesById(ctx context.Context, in *dal_ui.BatchArtId, opts ...grpc.CallOption) (*empty.Empty, error)
	// website query
	QueryDictsPage(ctx context.Context, in *dal_ui.DictPageReq, opts ...grpc.CallOption) (*dal_ui.DictPageResp, error)
	QueryArticle(ctx context.Context, in *dal_ui.ArticleReq, opts ...grpc.CallOption) (*dal_ui.Article, error)
	// manage query
	QueryMultiDictsByParent(ctx context.Context, in *dal_ui.MultiDictReq, opts ...grpc.CallOption) (*dal_ui.MultiDictResp, error)
	QueryMultiArticlesByDictName(ctx context.Context, in *dal_ui.MultiArticleReq, opts ...grpc.CallOption) (*dal_ui.MultiArticleResp, error)
}

type srvInfoServiceClient struct {
	cc *grpc.ClientConn
}

func NewSrvInfoServiceClient(cc *grpc.ClientConn) SrvInfoServiceClient {
	return &srvInfoServiceClient{cc}
}

func (c *srvInfoServiceClient) SaveDicts(ctx context.Context, in *dal_ui.DictList, opts ...grpc.CallOption) (*dal_ui.DictList, error) {
	out := new(dal_ui.DictList)
	err := c.cc.Invoke(ctx, "/srv_info.SrvInfoService/SaveDicts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvInfoServiceClient) SaveArticles(ctx context.Context, in *dal_ui.ArticleList, opts ...grpc.CallOption) (*dal_ui.ArticleList, error) {
	out := new(dal_ui.ArticleList)
	err := c.cc.Invoke(ctx, "/srv_info.SrvInfoService/SaveArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvInfoServiceClient) UpdateDictsStatusByDictName(ctx context.Context, in *dal_ui.PublishReq, opts ...grpc.CallOption) (*dal_ui.DictList, error) {
	out := new(dal_ui.DictList)
	err := c.cc.Invoke(ctx, "/srv_info.SrvInfoService/UpdateDictsStatusByDictName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvInfoServiceClient) BatchDeleteDictsById(ctx context.Context, in *dal_ui.BatchDictId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/srv_info.SrvInfoService/BatchDeleteDictsById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvInfoServiceClient) BatchDeleteArticlesById(ctx context.Context, in *dal_ui.BatchArtId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/srv_info.SrvInfoService/BatchDeleteArticlesById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvInfoServiceClient) QueryDictsPage(ctx context.Context, in *dal_ui.DictPageReq, opts ...grpc.CallOption) (*dal_ui.DictPageResp, error) {
	out := new(dal_ui.DictPageResp)
	err := c.cc.Invoke(ctx, "/srv_info.SrvInfoService/QueryDictsPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvInfoServiceClient) QueryArticle(ctx context.Context, in *dal_ui.ArticleReq, opts ...grpc.CallOption) (*dal_ui.Article, error) {
	out := new(dal_ui.Article)
	err := c.cc.Invoke(ctx, "/srv_info.SrvInfoService/QueryArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvInfoServiceClient) QueryMultiDictsByParent(ctx context.Context, in *dal_ui.MultiDictReq, opts ...grpc.CallOption) (*dal_ui.MultiDictResp, error) {
	out := new(dal_ui.MultiDictResp)
	err := c.cc.Invoke(ctx, "/srv_info.SrvInfoService/QueryMultiDictsByParent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvInfoServiceClient) QueryMultiArticlesByDictName(ctx context.Context, in *dal_ui.MultiArticleReq, opts ...grpc.CallOption) (*dal_ui.MultiArticleResp, error) {
	out := new(dal_ui.MultiArticleResp)
	err := c.cc.Invoke(ctx, "/srv_info.SrvInfoService/QueryMultiArticlesByDictName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SrvInfoServiceServer is the server API for SrvInfoService service.
type SrvInfoServiceServer interface {
	SaveDicts(context.Context, *dal_ui.DictList) (*dal_ui.DictList, error)
	SaveArticles(context.Context, *dal_ui.ArticleList) (*dal_ui.ArticleList, error)
	UpdateDictsStatusByDictName(context.Context, *dal_ui.PublishReq) (*dal_ui.DictList, error)
	BatchDeleteDictsById(context.Context, *dal_ui.BatchDictId) (*empty.Empty, error)
	BatchDeleteArticlesById(context.Context, *dal_ui.BatchArtId) (*empty.Empty, error)
	// website query
	QueryDictsPage(context.Context, *dal_ui.DictPageReq) (*dal_ui.DictPageResp, error)
	QueryArticle(context.Context, *dal_ui.ArticleReq) (*dal_ui.Article, error)
	// manage query
	QueryMultiDictsByParent(context.Context, *dal_ui.MultiDictReq) (*dal_ui.MultiDictResp, error)
	QueryMultiArticlesByDictName(context.Context, *dal_ui.MultiArticleReq) (*dal_ui.MultiArticleResp, error)
}

// UnimplementedSrvInfoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSrvInfoServiceServer struct {
}

func (*UnimplementedSrvInfoServiceServer) SaveDicts(ctx context.Context, req *dal_ui.DictList) (*dal_ui.DictList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveDicts not implemented")
}
func (*UnimplementedSrvInfoServiceServer) SaveArticles(ctx context.Context, req *dal_ui.ArticleList) (*dal_ui.ArticleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveArticles not implemented")
}
func (*UnimplementedSrvInfoServiceServer) UpdateDictsStatusByDictName(ctx context.Context, req *dal_ui.PublishReq) (*dal_ui.DictList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictsStatusByDictName not implemented")
}
func (*UnimplementedSrvInfoServiceServer) BatchDeleteDictsById(ctx context.Context, req *dal_ui.BatchDictId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteDictsById not implemented")
}
func (*UnimplementedSrvInfoServiceServer) BatchDeleteArticlesById(ctx context.Context, req *dal_ui.BatchArtId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteArticlesById not implemented")
}
func (*UnimplementedSrvInfoServiceServer) QueryDictsPage(ctx context.Context, req *dal_ui.DictPageReq) (*dal_ui.DictPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDictsPage not implemented")
}
func (*UnimplementedSrvInfoServiceServer) QueryArticle(ctx context.Context, req *dal_ui.ArticleReq) (*dal_ui.Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryArticle not implemented")
}
func (*UnimplementedSrvInfoServiceServer) QueryMultiDictsByParent(ctx context.Context, req *dal_ui.MultiDictReq) (*dal_ui.MultiDictResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMultiDictsByParent not implemented")
}
func (*UnimplementedSrvInfoServiceServer) QueryMultiArticlesByDictName(ctx context.Context, req *dal_ui.MultiArticleReq) (*dal_ui.MultiArticleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMultiArticlesByDictName not implemented")
}

func RegisterSrvInfoServiceServer(s *grpc.Server, srv SrvInfoServiceServer) {
	s.RegisterService(&_SrvInfoService_serviceDesc, srv)
}

func _SrvInfoService_SaveDicts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dal_ui.DictList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvInfoServiceServer).SaveDicts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srv_info.SrvInfoService/SaveDicts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvInfoServiceServer).SaveDicts(ctx, req.(*dal_ui.DictList))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvInfoService_SaveArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dal_ui.ArticleList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvInfoServiceServer).SaveArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srv_info.SrvInfoService/SaveArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvInfoServiceServer).SaveArticles(ctx, req.(*dal_ui.ArticleList))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvInfoService_UpdateDictsStatusByDictName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dal_ui.PublishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvInfoServiceServer).UpdateDictsStatusByDictName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srv_info.SrvInfoService/UpdateDictsStatusByDictName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvInfoServiceServer).UpdateDictsStatusByDictName(ctx, req.(*dal_ui.PublishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvInfoService_BatchDeleteDictsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dal_ui.BatchDictId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvInfoServiceServer).BatchDeleteDictsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srv_info.SrvInfoService/BatchDeleteDictsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvInfoServiceServer).BatchDeleteDictsById(ctx, req.(*dal_ui.BatchDictId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvInfoService_BatchDeleteArticlesById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dal_ui.BatchArtId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvInfoServiceServer).BatchDeleteArticlesById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srv_info.SrvInfoService/BatchDeleteArticlesById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvInfoServiceServer).BatchDeleteArticlesById(ctx, req.(*dal_ui.BatchArtId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvInfoService_QueryDictsPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dal_ui.DictPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvInfoServiceServer).QueryDictsPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srv_info.SrvInfoService/QueryDictsPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvInfoServiceServer).QueryDictsPage(ctx, req.(*dal_ui.DictPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvInfoService_QueryArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dal_ui.ArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvInfoServiceServer).QueryArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srv_info.SrvInfoService/QueryArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvInfoServiceServer).QueryArticle(ctx, req.(*dal_ui.ArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvInfoService_QueryMultiDictsByParent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dal_ui.MultiDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvInfoServiceServer).QueryMultiDictsByParent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srv_info.SrvInfoService/QueryMultiDictsByParent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvInfoServiceServer).QueryMultiDictsByParent(ctx, req.(*dal_ui.MultiDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvInfoService_QueryMultiArticlesByDictName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dal_ui.MultiArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvInfoServiceServer).QueryMultiArticlesByDictName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srv_info.SrvInfoService/QueryMultiArticlesByDictName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvInfoServiceServer).QueryMultiArticlesByDictName(ctx, req.(*dal_ui.MultiArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _SrvInfoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "srv_info.SrvInfoService",
	HandlerType: (*SrvInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveDicts",
			Handler:    _SrvInfoService_SaveDicts_Handler,
		},
		{
			MethodName: "SaveArticles",
			Handler:    _SrvInfoService_SaveArticles_Handler,
		},
		{
			MethodName: "UpdateDictsStatusByDictName",
			Handler:    _SrvInfoService_UpdateDictsStatusByDictName_Handler,
		},
		{
			MethodName: "BatchDeleteDictsById",
			Handler:    _SrvInfoService_BatchDeleteDictsById_Handler,
		},
		{
			MethodName: "BatchDeleteArticlesById",
			Handler:    _SrvInfoService_BatchDeleteArticlesById_Handler,
		},
		{
			MethodName: "QueryDictsPage",
			Handler:    _SrvInfoService_QueryDictsPage_Handler,
		},
		{
			MethodName: "QueryArticle",
			Handler:    _SrvInfoService_QueryArticle_Handler,
		},
		{
			MethodName: "QueryMultiDictsByParent",
			Handler:    _SrvInfoService_QueryMultiDictsByParent_Handler,
		},
		{
			MethodName: "QueryMultiArticlesByDictName",
			Handler:    _SrvInfoService_QueryMultiArticlesByDictName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "srv-info.proto",
}
